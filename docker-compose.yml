services:
  # PostgreSQL база данных
  postgres:
    image: postgres:15-alpine
    container_name: estimate_bot_db
    environment:
      POSTGRES_DB: estimates_db
      POSTGRES_USER: bot_user
      POSTGRES_PASSWORD: bot_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.d:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - bot_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bot_user -d estimates_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Телеграм бот
  bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: estimate_bot
    environment:
      BOT_TOKEN: ${BOT_TOKEN}
      DATABASE_URL: postgresql://bot_user:bot_password@postgres:5432/estimates_db
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      GIGACHAT_CREDENTIALS: ${GIGACHAT_CREDENTIALS}
      GIGACHAT_MODEL: ${GIGACHAT_MODEL}
      GIGACHAT_SCOPE: ${GIGACHAT_SCOPE}
      AI_ENABLED: ${AI_ENABLED}
    volumes:
      - bot_data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - bot_network
    restart: unless-stopped

  # Redis для кэширования (опционально)
  redis:
    image: redis:7-alpine
    container_name: estimate_bot_redis
    volumes:
      - redis_data:/data
    networks:
      - bot_network
    restart: unless-stopped
    command: redis-server --appendonly yes

volumes:
  postgres_data:
    driver: local
  bot_data:
    driver: local
  redis_data:
    driver: local

networks:
  bot_network:
    driver: bridge 