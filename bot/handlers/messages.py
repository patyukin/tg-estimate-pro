"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö
"""
import logging

from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

from bot.keyboards.inline import get_main_keyboard, get_estimate_keyboard
from bot.keyboards.reply import get_cancel_keyboard, get_category_keyboard, get_skip_keyboard, remove_keyboard
from bot.utils.states import EstimateStates, TemplateStates, AIStates
from bot.utils.decorators import error_handler
from bot.utils.validators import validate_duration, validate_cost, validate_text_length, sanitize_text
from bot.utils.helpers import format_estimate_card

logger = logging.getLogger(__name__)
router = Router()


# === –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–ú–ï–ù–´ ===

@router.message(F.text == "üö´ –û—Ç–º–µ–Ω–∞")
@error_handler
async def process_cancel(message: Message, state: FSMContext, **kwargs):
    """–û—Ç–º–µ–Ω–∞ –ª—é–±–æ–≥–æ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
        await message.answer(
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!",
            reply_markup=remove_keyboard()
        )
        await message.answer(
            "üèóÔ∏è <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>",
            reply_markup=get_main_keyboard(),
            parse_mode="HTML"
        )


# === –°–û–ó–î–ê–ù–ò–ï –®–ê–ë–õ–û–ù–û–í ===

@router.message(StateFilter(TemplateStates.waiting_template_name))
@error_handler
async def process_template_name(message: Message, state: FSMContext, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
    name = sanitize_text(message.text)
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    is_valid, error_msg = validate_text_length(name, min_length=3, max_length=100)
    if not is_valid:
        await message.answer(error_msg)
        return
    
    await state.update_data(name=name)
    await message.answer(
        f"‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n\n"
        f"üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:\n"
        f"<i>–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ</i>",
        reply_markup=get_skip_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(TemplateStates.waiting_template_description)


@router.message(StateFilter(TemplateStates.waiting_template_description))
@error_handler
async def process_template_description(message: Message, state: FSMContext, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
    if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        description = ""
    else:
        description = sanitize_text(message.text)
        is_valid, error_msg = validate_text_length(description, min_length=0, max_length=500)
        if not is_valid:
            await message.answer(error_msg)
            return
    
    await state.update_data(description=description)
    await message.answer(
        "‚è±Ô∏è –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —á–∞—Å–∞—Ö:\n"
        "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 8 –∏–ª–∏ 2.5</i>",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(TemplateStates.waiting_template_duration)


@router.message(StateFilter(TemplateStates.waiting_template_duration))
@error_handler
async def process_template_duration(message: Message, state: FSMContext, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
    is_valid, duration, error_msg = validate_duration(message.text)
    if not is_valid:
        await message.answer(error_msg)
        return
    
    await state.update_data(duration=duration)
    await message.answer(
        f"‚úÖ <b>–í—Ä–µ–º—è:</b> {duration} —á\n\n"
        f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö:\n"
        f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 5000 –∏–ª–∏ 7500.50</i>",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(TemplateStates.waiting_template_cost)


@router.message(StateFilter(TemplateStates.waiting_template_cost))
@error_handler
async def process_template_cost(message: Message, state: FSMContext, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —à–∞–±–ª–æ–Ω–∞"""
    is_valid, cost, error_msg = validate_cost(message.text)
    if not is_valid:
        await message.answer(error_msg)
        return
    
    await state.update_data(cost=cost)
    await message.answer(
        f"‚úÖ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {cost} ‚ÇΩ\n\n"
        f"üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_category_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(TemplateStates.waiting_template_category)


@router.message(StateFilter(TemplateStates.waiting_template_category))
@error_handler
async def process_template_category(message: Message, state: FSMContext, user_id: int, db, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞"""
    category = message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    valid_categories = [
        "Frontend", "Backend", "DevOps", "Design", 
        "Analytics", "Testing", "Mobile", "Database"
    ]
    
    if category not in valid_categories:
        await message.answer(
            "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫!"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    
    try:
        # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        template_id = await db.create_work_template(
            user_id=user_id,
            name=data['name'],
            description=data['description'],
            category=category,
            default_duration=data['duration'],
            default_cost=data['cost']
        )
        
        await message.answer(
            f"‚úÖ <b>–®–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}\n"
            f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category}\n"
            f"‚è±Ô∏è <b>–í—Ä–µ–º—è:</b> {data['duration']} —á\n"
            f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {data['cost']} ‚ÇΩ",
            reply_markup=remove_keyboard(),
            parse_mode="HTML"
        )
        
        await message.answer(
            "üèóÔ∏è <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>",
            reply_markup=get_main_keyboard(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=remove_keyboard()
        )
    
    await state.clear()


# === –°–û–ó–î–ê–ù–ò–ï –°–ú–ï–¢ ===

@router.message(StateFilter(EstimateStates.waiting_title))
@error_handler
async def process_estimate_title(message: Message, state: FSMContext, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–º–µ—Ç—ã"""
    title = sanitize_text(message.text)
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    is_valid, error_msg = validate_text_length(title, min_length=3, max_length=200)
    if not is_valid:
        await message.answer(error_msg)
        return
    
    await state.update_data(title=title)
    await message.answer(
        f"‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n\n"
        f"üìù –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:\n"
        f"<i>–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ</i>",
        reply_markup=get_skip_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(EstimateStates.waiting_description)


@router.message(StateFilter(EstimateStates.waiting_description))
@error_handler
async def process_estimate_description(message: Message, state: FSMContext, user_id: int, db, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–º–µ—Ç—ã"""
    if message.text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        description = ""
    else:
        description = sanitize_text(message.text)
        is_valid, error_msg = validate_text_length(description, min_length=0, max_length=1000)
        if not is_valid:
            await message.answer(error_msg)
            return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–º–µ—Ç—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        estimate_id = await db.create_estimate(
            user_id=user_id,
            title=data['title'],
            description=description
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å–º–µ—Ç—É
        estimate = await db.get_estimate_by_id(estimate_id, user_id)
        
        success_text = f"""
‚úÖ <b>–°–º–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>

{format_estimate_card(estimate, 0, 0, 0)}

–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ —Ä–∞–±–æ—Ç:
"""
        
        await message.answer(
            success_text,
            reply_markup=remove_keyboard(),
            parse_mode="HTML"
        )
        
        await message.answer(
            "–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            reply_markup=get_estimate_keyboard(estimate_id),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ—Ç—ã: {e}")
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–º–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=remove_keyboard()
        )
    
    await state.clear()


# === –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ô –í –°–ú–ï–¢–£ ===

@router.message(StateFilter(EstimateStates.waiting_item_name))
@error_handler
async def process_item_name(message: Message, state: FSMContext, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
    name = sanitize_text(message.text)
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    is_valid, error_msg = validate_text_length(name, min_length=3, max_length=200)
    if not is_valid:
        await message.answer(error_msg)
        return
    
    await state.update_data(item_name=name)
    await message.answer(
        f"‚úÖ <b>–ü–æ–∑–∏—Ü–∏—è:</b> {name}\n\n"
        f"‚è±Ô∏è –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —á–∞—Å–∞—Ö:\n"
        f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 8 –∏–ª–∏ 2.5</i>",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(EstimateStates.waiting_item_duration)


@router.message(StateFilter(EstimateStates.waiting_item_duration))
@error_handler
async def process_item_duration(message: Message, state: FSMContext, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
    is_valid, duration, error_msg = validate_duration(message.text)
    if not is_valid:
        await message.answer(error_msg)
        return
    
    await state.update_data(item_duration=duration)
    await message.answer(
        f"‚úÖ <b>–í—Ä–µ–º—è:</b> {duration} —á\n\n"
        f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö:\n"
        f"<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 5000 –∏–ª–∏ 7500.50</i>",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(EstimateStates.waiting_item_cost)


@router.message(StateFilter(EstimateStates.waiting_item_cost))
@error_handler
async def process_item_cost(message: Message, state: FSMContext, user_id: int, db, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–º–µ—Ç—É"""
    is_valid, cost, error_msg = validate_cost(message.text)
    if not is_valid:
        await message.answer(error_msg)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    estimate_id = data['estimate_id']
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ —Å–º–µ—Ç—É
        item_id = await db.add_estimate_item(
            estimate_id=estimate_id,
            name=data['item_name'],
            description="",
            duration=data['item_duration'],
            cost=cost
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å–º–µ—Ç—É
        estimate = await db.get_estimate_by_id(estimate_id, user_id)
        
        success_text = f"""
‚úÖ <b>–ü–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>

üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['item_name']}
‚è±Ô∏è <b>–í—Ä–µ–º—è:</b> {data['item_duration']} —á
üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {cost} ‚ÇΩ

{format_estimate_card(estimate, estimate.get('items_count', 0), estimate.get('total_cost', 0), estimate.get('total_duration', 0))}
"""
        
        await message.answer(
            success_text,
            reply_markup=remove_keyboard(),
            parse_mode="HTML"
        )
        
        await message.answer(
            "–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            reply_markup=get_estimate_keyboard(estimate_id),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=remove_keyboard()
        )
    
    await state.clear()


# === –ò–ò-–ü–û–ú–û–©–ù–ò–ö ===

@router.message(StateFilter(AIStates.waiting_ai_description))
@error_handler
async def process_ai_description(message: Message, state: FSMContext, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ò–ò"""
    description = sanitize_text(message.text)
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    is_valid, error_msg = validate_text_length(description, min_length=10, max_length=1000)
    if not is_valid:
        await message.answer(error_msg)
        return
    
    await state.update_data(ai_description=description)
    await message.answer(
        f"‚úÖ <b>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!</b>\n\n"
        f"üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞:",
        reply_markup=remove_keyboard(),
        parse_mode="HTML"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞
    from bot.keyboards.inline import get_project_type_keyboard
    await message.answer(
        "üéØ <b>–¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞:</b>",
        reply_markup=get_project_type_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(AIStates.waiting_ai_project_type)


@router.message(StateFilter(AIStates.waiting_ai_consultation))
@error_handler
async def process_ai_consultation(message: Message, state: FSMContext, config, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å –ò–ò"""
    question = sanitize_text(message.text)
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    is_valid, error_msg = validate_text_length(question, min_length=5, max_length=500)
    if not is_valid:
        await message.answer(error_msg)
        return
    
    await message.answer(
        "ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...",
        reply_markup=remove_keyboard()
    )
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ò–ò
    if config.is_ai_available:
        # TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å GigaChat –∏–ª–∏ –¥—Ä—É–≥–∏–º –ò–ò
        response = f"""
ü§ñ <b>–ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –æ—Ç–≤–µ—á–∞–µ—Ç:</b>

–ü–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É: "{question[:100]}"

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. 
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.

üí° <b>–û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ –†–∞–∑–±–∏–≤–∞–π—Ç–µ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è —Ç–∏–ø–æ–≤—ã—Ö —Ä–∞–±–æ—Ç
‚Ä¢ –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –≤—Ä–µ–º—è –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ª–∞–¥–∫—É
‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ 20-30% –∫ –æ—Ü–µ–Ω–∫–∞–º –≤—Ä–µ–º–µ–Ω–∏
"""
    else:
        response = """
ü§ñ <b>–ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>

–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ò–ò –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–∏—Å—É.

üí° <b>–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
‚Ä¢ –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø—Ä–æ–µ–∫—Ç–æ–≤
"""
    
    await message.answer(
        response,
        parse_mode="HTML"
    )
    
    await message.answer(
        "üèóÔ∏è <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>",
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )
    
    await state.clear() 