"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–∞
"""
import logging

from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext

from bot.keyboards.inline import get_ai_keyboard, get_back_keyboard
from bot.keyboards.reply import get_cancel_keyboard
from bot.utils.states import AIStates
from bot.utils.decorators import error_handler

logger = logging.getLogger(__name__)
router = Router()


@router.callback_query(F.data == "ai_assistant")
@error_handler
async def callback_ai_assistant(callback: CallbackQuery, config, **kwargs):
    """–ú–µ–Ω—é –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–∞"""
    if config.is_ai_available:
        text = """
ü§ñ <b>–ò–ò-–ø–æ–º–æ—â–Ω–∏–∫</b>

–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:
‚Ä¢ üß† –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ—Ç—ã –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
‚Ä¢ üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
‚Ä¢ üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á

<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>
"""
    else:
        text = """
ü§ñ <b>–ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>

–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ò–ò –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–∏—Å—É GigaChat.

üí° <b>–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã
‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–º–µ—Ç—ã –≤—Ä—É—á–Ω—É—é
"""
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=get_ai_keyboard() if config.is_ai_available else get_back_keyboard()
    )


@router.callback_query(F.data == "ai_generate_estimate")
@error_handler
async def callback_ai_generate_estimate(callback: CallbackQuery, state: FSMContext, config, **kwargs):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–º–µ—Ç—ã —Å –ø–æ–º–æ—â—å—é –ò–ò"""
    if not config.is_ai_available:
        await callback.answer("‚ö†Ô∏è –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
        return
    
    await callback.message.edit_text(
        "ü§ñ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–º–µ—Ç—ã —Å –ò–ò</b>\n\n"
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç:\n"
        "<i>–ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—à–µ—Ç–µ, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥–µ—Ç —Å–º–µ—Ç–∞</i>",
        parse_mode="HTML"
    )
    
    await callback.message.answer(
        "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=get_cancel_keyboard()
    )
    
    await state.set_state(AIStates.waiting_ai_description)


@router.callback_query(F.data == "ai_consultation")
@error_handler
async def callback_ai_consultation(callback: CallbackQuery, state: FSMContext, config, **kwargs):
    """–ò–ò –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"""
    if not config.is_ai_available:
        await callback.answer("‚ö†Ô∏è –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
        return
    
    await callback.message.edit_text(
        "üí¨ <b>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –ò–ò</b>\n\n"
        "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –æ—Ü–µ–Ω–∫–µ –≤—Ä–µ–º–µ–Ω–∏,\n"
        "–≤—ã–±–æ—Ä–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:",
        parse_mode="HTML"
    )
    
    await callback.message.answer(
        "–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
        reply_markup=get_cancel_keyboard()
    )
    
    await state.set_state(AIStates.waiting_ai_consultation) 