"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏ —Ä–∞–±–æ—Ç
"""
import logging

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from bot.keyboards.inline import get_work_templates_keyboard
from bot.keyboards.reply import get_cancel_keyboard
from bot.utils.states import TemplateStates
from bot.utils.decorators import error_handler
from bot.utils.helpers import format_template_card

logger = logging.getLogger(__name__)
router = Router()


@router.callback_query(F.data == "work_templates")
@error_handler
async def callback_work_templates(callback: CallbackQuery, **kwargs):
    """–ú–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏"""
    text = """
üîß <b>–®–∞–±–ª–æ–Ω—ã —Ä–∞–±–æ—Ç</b>

–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è:
‚Ä¢ –£—Å–∫–æ—Ä–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ—Ç
‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç
‚Ä¢ –¢–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏

<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>
"""
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=get_work_templates_keyboard()
    )


@router.callback_query(F.data == "create_template")
@error_handler
async def callback_create_template(callback: CallbackQuery, state: FSMContext, **kwargs):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
    await callback.message.edit_text(
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —Ä–∞–±–æ—Ç—ã</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:\n"
        "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: '–í–µ—Ä—Å—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã'</i>",
        parse_mode="HTML"
    )
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(TemplateStates.waiting_template_name)


@router.callback_query(F.data == "my_templates")
@error_handler
async def callback_my_templates(callback: CallbackQuery, user_id: int, db, **kwargs):
    """–ü–æ–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
    templates = await db.get_user_templates(user_id)
    
    if not templates:
        text = """
üîß <b>–ú–æ–∏ —à–∞–±–ª–æ–Ω—ã</b>

üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤.

–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã!
"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="create_template")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="work_templates")]
        ])
    else:
        text = f"üîß <b>–ú–æ–∏ —à–∞–±–ª–æ–Ω—ã</b> ({len(templates)})\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for template in templates:
            category = template.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
            if category not in categories:
                categories[category] = []
            categories[category].append(template)
        
        for category, cat_templates in categories.items():
            text += f"üìÇ <b>{category}</b>\n"
            for template in cat_templates[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                text += format_template_card(template) + "\n"
            if len(cat_templates) > 3:
                text += f"... –∏ –µ—â–µ {len(cat_templates) - 3} —à–∞–±–ª–æ–Ω–æ–≤\n"
            text += "\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —à–∞–±–ª–æ–Ω–∞–º–∏
        keyboard_buttons = []
        for i, template in enumerate(templates[:10]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —à–∞–±–ª–æ–Ω–∞–º–∏
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"üîß {template['name'][:30]}", 
                    callback_data=f"show_template:{template['id']}"
                )
            ])
        
        keyboard_buttons.extend([
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="create_template")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="work_templates")]
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=keyboard
    )


@router.callback_query(F.data.startswith("show_template:"))
@error_handler
async def callback_show_template(callback: CallbackQuery, db, **kwargs):
    """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à–∞–±–ª–æ–Ω–µ"""
    template_id = int(callback.data.split(":")[1])
    template = await db.get_template_by_id(template_id)
    
    if not template:
        await callback.answer("‚ö†Ô∏è –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    text = f"""
üîß <b>–®–∞–±–ª–æ–Ω —Ä–∞–±–æ—Ç—ã</b>

<b>üìù –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {template['name']}
<b>üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {template.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')}
<b>‚è±Ô∏è –í—Ä–µ–º—è:</b> {template['default_duration']} —á
<b>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {template['default_cost']} ‚ÇΩ
<b>üî• –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:</b> {template.get('usage_count', 0)}
"""
    
    if template.get('description'):
        text += f"\n<b>üìÑ –û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{template['description']}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", 
            callback_data=f"delete_template:{template_id}"
        )],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="my_templates")]
    ])
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=keyboard
    )


@router.callback_query(F.data.startswith("delete_template:"))
@error_handler
async def callback_delete_template(callback: CallbackQuery, **kwargs):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
    template_id = int(callback.data.split(":")[1])
    
    text = "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞</b>\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω?"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_delete_template:{template_id}"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"show_template:{template_id}")
        ]
    ])
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=keyboard
    )


@router.callback_query(F.data.startswith("confirm_delete_template:"))
@error_handler
async def callback_confirm_delete_template(callback: CallbackQuery, user_id: int, db, **kwargs):
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞"""
    template_id = int(callback.data.split(":")[1])
    
    success = await db.delete_template(template_id, user_id)
    
    if success:
        await callback.answer("‚úÖ –®–∞–±–ª–æ–Ω —É–¥–∞–ª–µ–Ω!")
        await callback_my_templates(callback, user_id=user_id, db=db)
    else:
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏!") 