"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–º–µ—Ç–∞–º–∏
"""
import logging

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from bot.keyboards.inline import (
    get_estimate_keyboard, get_add_item_method_keyboard
)
from bot.keyboards.reply import get_cancel_keyboard
from bot.utils.states import EstimateStates
from bot.utils.decorators import error_handler
from bot.utils.helpers import format_estimate_card

logger = logging.getLogger(__name__)
router = Router()


@router.callback_query(F.data == "create_estimate")
@error_handler
async def callback_create_estimate(callback: CallbackQuery, state: FSMContext, **kwargs):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–º–µ—Ç—ã"""
    await callback.message.edit_text(
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–º–µ—Ç—ã</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–º–µ—Ç—ã:\n"
        "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞'</i>",
        parse_mode="HTML"
    )
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–º–µ—Ç—ã:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(EstimateStates.waiting_title)


@router.callback_query(F.data == "my_estimates")
@error_handler
async def callback_my_estimates(callback: CallbackQuery, user_id: int, db, **kwargs):
    """–ü–æ–∫–∞–∑ –≤—Å–µ—Ö —Å–º–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    estimates = await db.get_user_estimates(user_id)
    
    if not estimates:
        text = """
üìã <b>–ú–æ–∏ —Å–º–µ—Ç—ã</b>

üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–º–µ—Ç.

–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Å–º–µ—Ç—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã!
"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å —Å–º–µ—Ç—É", callback_data="create_estimate")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    else:
        text = f"üìã <b>–ú–æ–∏ —Å–º–µ—Ç—ã</b> ({len(estimates)})\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–º–µ—Ç
        for estimate in estimates[:5]:
            items_count = estimate.get('items_count', 0)
            total_cost = estimate.get('total_cost', 0)
            total_duration = estimate.get('total_duration', 0)
            
            text += format_estimate_card(estimate, items_count, total_cost, total_duration) + "\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard_buttons = []
        for i, estimate in enumerate(estimates[:8]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 8 —Å–º–µ—Ç–∞–º–∏
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"üìÑ {estimate['title'][:25]}", 
                    callback_data=f"show_estimate:{estimate['id']}"
                )
            ])
        
        keyboard_buttons.extend([
            [InlineKeyboardButton(text="üìù –ù–æ–≤–∞—è —Å–º–µ—Ç–∞", callback_data="create_estimate")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=keyboard
    )


@router.callback_query(F.data.startswith("show_estimate:"))
@error_handler
async def callback_show_estimate(callback: CallbackQuery, user_id: int, db, **kwargs):
    """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–º–µ—Ç–µ"""
    estimate_id = int(callback.data.split(":")[1])
    estimate = await db.get_estimate_by_id(estimate_id, user_id)
    
    if not estimate:
        await callback.answer("‚ö†Ô∏è –°–º–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å–º–µ—Ç—ã
    items = await db.get_estimate_items(estimate_id)
    
    text = f"""
üìÑ <b>{estimate['title']}</b>

"""
    
    if estimate.get('description'):
        text += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{estimate['description']}\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
    if items:
        text += f"üìä <b>–ü–æ–∑–∏—Ü–∏–∏ —Ä–∞–±–æ—Ç ({len(items)}):</b>\n\n"
        total_cost = 0
        total_duration = 0
        
        for i, item in enumerate(items[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            total_cost += item['cost']
            total_duration += item['duration']
            text += f"‚î£ {i}. <b>{item['name']}</b>\n"
            text += f"   ‚è±Ô∏è {item['duration']} —á  üí∞ {item['cost']:,.0f} ‚ÇΩ\n"
        
        if len(items) > 10:
            text += f"\n... –∏ –µ—â–µ {len(items) - 10} –ø–æ–∑–∏—Ü–∏–π\n"
        
        text += f"\nüìà <b>–ò—Ç–æ–≥–æ:</b>\n"
        text += f"‚è±Ô∏è –í—Ä–µ–º—è: {total_duration} —á\n"
        text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost:,.0f} ‚ÇΩ"
    else:
        text += "üìù –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π –≤ —Å–º–µ—Ç–µ.\n\n–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –ø–æ–∑–∏—Ü–∏—é!"
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=get_estimate_keyboard(estimate_id)
    )


@router.callback_query(F.data.startswith("add_item:"))
@error_handler
async def callback_add_item(callback: CallbackQuery, state: FSMContext, **kwargs):
    """–í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
    estimate_id = int(callback.data.split(":")[1])
    
    text = """
‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:
‚Ä¢ <b>–ò–∑ —à–∞–±–ª–æ–Ω–∞</b> - –±—ã—Å—Ç—Ä–æ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ
‚Ä¢ <b>–í—Ä—É—á–Ω—É—é</b> - –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å
"""
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=get_add_item_method_keyboard(estimate_id)
    )


@router.callback_query(F.data.startswith("add_manual:"))
@error_handler
async def callback_add_manual(callback: CallbackQuery, state: FSMContext, **kwargs):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤—Ä—É—á–Ω—É—é"""
    estimate_id = int(callback.data.split(":")[1])
    
    await state.update_data(estimate_id=estimate_id)
    
    await callback.message.edit_text(
        "‚úèÔ∏è <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤—Ä—É—á–Ω—É—é</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏:\n"
        "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'</i>",
        parse_mode="HTML"
    )
    
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏:",
        reply_markup=get_cancel_keyboard()
    )
    
    await state.set_state(EstimateStates.waiting_item_name)


@router.callback_query(F.data.startswith("add_from_template:"))
@error_handler
async def callback_add_from_template(callback: CallbackQuery, user_id: int, db, **kwargs):
    """–ü–æ–∫–∞–∑ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
    estimate_id = int(callback.data.split(":")[1])
    templates = await db.get_user_templates(user_id)
    
    if not templates:
        text = """
üîß <b>–®–∞–±–ª–æ–Ω—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</b>

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤.
–°–æ–∑–¥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–∑–∏—Ü–∏—é –≤—Ä—É—á–Ω—É—é.
"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é",
                callback_data=f"add_manual:{estimate_id}"
            )],
            [InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"show_estimate:{estimate_id}"
            )]
        ])
    else:
        text = f"üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω</b> ({len(templates)})\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for template in templates:
            category = template.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
            if category not in categories:
                categories[category] = []
            categories[category].append(template)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard_buttons = []
        for category, cat_templates in categories.items():
            text += f"üìÇ <b>{category}</b>\n"
            for template in cat_templates[:3]:
                text += f"‚î£ {template['name']} ({template['default_duration']} —á, {template['default_cost']} ‚ÇΩ)\n"
                keyboard_buttons.append([InlineKeyboardButton(
                    text=f"üîß {template['name'][:35]}",
                    callback_data=f"use_template:{estimate_id}:{template['id']}"
                )])
            text += "\n"
        
        keyboard_buttons.extend([
            [InlineKeyboardButton(
                text="‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é",
                callback_data=f"add_manual:{estimate_id}"
            )],
            [InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"show_estimate:{estimate_id}"
            )]
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=keyboard
    )


@router.callback_query(F.data.startswith("use_template:"))
@error_handler
async def callback_use_template(callback: CallbackQuery, user_id: int, db, **kwargs):
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
    parts = callback.data.split(":")
    estimate_id = int(parts[1])
    template_id = int(parts[2])
    
    # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω
    template = await db.get_template_by_id(template_id)
    if not template:
        await callback.answer("‚ö†Ô∏è –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–∑ —à–∞–±–ª–æ–Ω–∞
        item_id = await db.add_estimate_item(
            estimate_id=estimate_id,
            name=template['name'],
            description=template.get('description', ''),
            duration=template['default_duration'],
            cost=template['default_cost']
        )
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
        await db.increment_template_usage(template_id)
        
        await callback.answer("‚úÖ –ü–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å–º–µ—Ç—É
        await callback_show_estimate(callback, user_id=user_id, db=db)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ —à–∞–±–ª–æ–Ω–∞: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏!")


@router.callback_query(F.data.startswith("delete_estimate:"))
@error_handler
async def callback_delete_estimate(callback: CallbackQuery, **kwargs):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–º–µ—Ç—ã"""
    estimate_id = int(callback.data.split(":")[1])
    
    text = "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —Å–º–µ—Ç—ã</b>\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Å–º–µ—Ç—É?"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_delete:estimate:{estimate_id}"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"show_estimate:{estimate_id}")
        ]
    ])
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=keyboard
    )


@router.callback_query(F.data.startswith("confirm_delete:"))
@error_handler
async def callback_confirm_delete(callback: CallbackQuery, user_id: int, db, **kwargs):
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ"""
    parts = callback.data.split(":")
    item_type = parts[1]  # estimate –∏–ª–∏ item
    item_id = int(parts[2])
    
    if item_type == "estimate":
        success = await db.delete_estimate(item_id, user_id)
        if success:
            await callback.answer("‚úÖ –°–º–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞!")
            await callback_my_estimates(callback, user_id=user_id, db=db)
        else:
            await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏!")


@router.callback_query(F.data == "active_estimates")
@error_handler
async def callback_active_estimates(callback: CallbackQuery, user_id: int, db, **kwargs):
    """–ü–æ–∫–∞–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ—Ç (—Å –ø–æ–∑–∏—Ü–∏—è–º–∏)"""
    estimates = await db.get_user_estimates(user_id)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–º–µ—Ç—ã —Å –ø–æ–∑–∏—Ü–∏—è–º–∏
    active_estimates = []
    for estimate in estimates:
        items_count = estimate.get('items_count', 0)
        if items_count > 0:
            active_estimates.append(estimate)
    
    if not active_estimates:
        text = """
‚ö° <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–º–µ—Ç—ã</b>

üìù –ù–µ—Ç —Å–º–µ—Ç —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ —Ä–∞–±–æ—Ç.

–°–æ–∑–¥–∞–π—Ç–µ —Å–º–µ—Ç—É –∏ –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–∑–∏—Ü–∏–∏,
—á—Ç–æ–±—ã –æ–Ω–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –∑–¥–µ—Å—å!
"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å —Å–º–µ—Ç—É", callback_data="create_estimate")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    else:
        text = f"‚ö° <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–º–µ—Ç—ã</b> ({len(active_estimates)})\n\n"
        
        for estimate in active_estimates[:5]:
            items_count = estimate.get('items_count', 0)
            total_cost = estimate.get('total_cost', 0)
            total_duration = estimate.get('total_duration', 0)
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä (—É—Å–ª–æ–≤–Ω–æ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ 100% = –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –≥–æ—Ç–æ–≤—ã)
            progress = "‚ñ∞‚ñ∞‚ñ∞‚ñ±‚ñ±‚ñ±‚ñ±" if items_count > 0 else "‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±"
            
            text += f"""
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ üìÑ <b>{estimate['title'][:20]}</b>
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ üìä –ü–æ–∑–∏—Ü–∏–π: {items_count}
‚îÇ ‚è±Ô∏è –í—Ä–µ–º—è: {total_duration} —á
‚îÇ üí∞ –°—É–º–º–∞: {total_cost:,.0f} ‚ÇΩ
‚îÇ üìà {progress}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

"""
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        keyboard_buttons = []
        for estimate in active_estimates[:6]:
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"‚ö° {estimate['title'][:25]}", 
                    callback_data=f"show_estimate:{estimate['id']}"
                )
            ])
        
        keyboard_buttons.extend([
            [InlineKeyboardButton(text="üìã –í—Å–µ —Å–º–µ—Ç—ã", callback_data="my_estimates")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=keyboard
    ) 