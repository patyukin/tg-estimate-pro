import logging
import json
import asyncio
from typing import List, Dict, Any, Optional
from dataclasses import dataclass
import uuid
import time
from gigachat import GigaChat
from config import Config

logger = logging.getLogger(__name__)

@dataclass
class EstimateItem:
    """–ü–æ–∑–∏—Ü–∏—è —Å–º–µ—Ç—ã"""
    name: str
    duration: float
    cost: float
    description: str = ""

@dataclass
class AIAnalysis:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ò–ò"""
    suggestions: List[str]
    optimization_tips: List[str]
    risk_factors: List[str]
    total_estimation: Dict[str, float]

class AIAssistant:
    """–ü–æ–º–æ—â–Ω–∏–∫ —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–º–µ—Ç–∞–º–∏ –Ω–∞ –±–∞–∑–µ GigaChat"""
    
    def __init__(self, config: Config):
        self.config = config
        self.enabled = config.ai_enabled
        
        if self.enabled:
            try:
                self.model = config.gigachat_model
                self.giga = GigaChat(
                    credentials=config.gigachat_credentials,
                    scope=config.gigachat_scope,
                    model=self.model,
                    verify_ssl_certs=False
                )
                logger.info(f"–ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–æ–¥–µ–ª—å—é {self.model}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GigaChat: {e}")
                self.enabled = False
        else:
            logger.warning("–ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω")
    
    def is_enabled(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ò–ò"""
        return self.enabled
    
    def generate_estimate_items(self, project_description: str, project_type: str = "–æ–±—â–∏–π") -> List[EstimateItem]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π —Å–º–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
        
        Args:
            project_description: –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
            project_type: –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞ (–≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞, –º–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞, –¥–∏–∑–∞–π–Ω –∏ —Ç.–¥.)
        
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π —Å–º–µ—Ç—ã
        """
        if not self.enabled:
            logger.warning("ü§ñ –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞")
            return []
        
        logger.info(f"üîÆ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–º–µ—Ç—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ —Ç–∏–ø–∞ '{project_type}'")
        logger.debug(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: {project_description[:100]}...")
        
        start_time = time.time()
        
        try:
            prompt = f"""
            –¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Å–º–µ—Ç –¥–ª—è IT-–ø—Ä–æ–µ–∫—Ç–æ–≤. –ù–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—É—é —Å–º–µ—Ç—É.
            
            –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: {project_description}
            –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞: {project_type}
            
            –°–æ–∑–¥–∞–π —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å –ø–æ–ª—è–º–∏:
            - name: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
            - duration: –≤—Ä–µ–º—è –≤ —á–∞—Å–∞—Ö (float)
            - cost: —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö (float)
            - description: –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
            
            –£—á—Ç–∏:
            - –†—ã–Ω–æ—á–Ω—ã–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏ –Ω–∞ 2024 –≥–æ–¥ –¥–ª—è –†–æ—Å—Å–∏–∏
            - –í—Å–µ —ç—Ç–∞–ø—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–∞–Ω–∞–ª–∏–∑, –¥–∏–∑–∞–π–Ω, —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –¥–µ–ø–ª–æ–π)
            - –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∏—Å–∫–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
            - –°—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞: junior 1500-2500‚ÇΩ/—á, middle 2500-4000‚ÇΩ/—á, senior 4000-6000‚ÇΩ/—á
            
            –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON –º–∞—Å—Å–∏–≤–æ–º –æ–±—ä–µ–∫—Ç–æ–≤.
            """
            
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ GigaChat (–º–æ–¥–µ–ª—å: {self.model})")
            logger.debug(f"üî§ –†–∞–∑–º–µ—Ä –ø—Ä–æ–º–ø—Ç–∞: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            messages = [{"role": "user", "content": prompt}]
            response = self.giga.chat({"messages": messages})
            
            request_time = time.time() - start_time
            logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç GigaChat –∑–∞ {request_time:.2f} —Å–µ–∫")
            
            content = response.choices[0].message.content.strip()
            logger.debug(f"üìã –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
            logger.debug(f"üîç –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞: {content[:200]}...")
            
            # –ü–∞—Ä—Å–∏–º JSON
            try:
                logger.info("üîß –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç...")
                # –£–±–∏—Ä–∞–µ–º markdown –±–ª–æ–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                if content.startswith('```json') and content.endswith('```'):
                    content = content[7:-3].strip()
                elif content.startswith('```') and content.endswith('```'):
                    content = content[3:-3].strip()
                items_data = json.loads(content)
                items = []
                
                for i, item_data in enumerate(items_data, 1):
                    item = EstimateItem(
                        name=item_data.get('name', ''),
                        duration=float(item_data.get('duration', 0)),
                        cost=float(item_data.get('cost', 0)),
                        description=item_data.get('description', '')
                    )
                    items.append(item)
                    logger.debug(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {i}: {item.name} - {item.duration}—á, {item.cost}‚ÇΩ")
                
                total_time = time.time() - start_time
                total_cost = sum(item.cost for item in items)
                total_duration = sum(item.duration for item in items)
                
                logger.info(f"üéâ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(items)} –ø–æ–∑–∏—Ü–∏–π —Å–º–µ—Ç—ã –∑–∞ {total_time:.2f} —Å–µ–∫")
                logger.info(f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost:.0f}‚ÇΩ, –≤—Ä–µ–º—è: {total_duration:.1f}—á")
                return items
                
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç –ò–ò: {e}")
                logger.error(f"üîç –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –æ—Ç–≤–µ—Ç: {content}")
                return []
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–º–µ—Ç—ã: {e}")
            logger.error(f"‚è±Ô∏è –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: {time.time() - start_time:.2f} —Å–µ–∫")
            return []
    
    def analyze_estimate(self, estimate_data: Dict[str, Any], items: List[Dict[str, Any]]) -> AIAnalysis:
        """
        –ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–º–µ—Ç—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
        
        Args:
            estimate_data: –î–∞–Ω–Ω—ã–µ —Å–º–µ—Ç—ã
            items: –ü–æ–∑–∏—Ü–∏–∏ —Å–º–µ—Ç—ã
        
        Returns:
            –ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        """
        if not self.enabled:
            logger.warning("ü§ñ –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω - –∞–Ω–∞–ª–∏–∑ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω")
            return AIAnalysis([], [], [], {})
        
        logger.info(f"üß† –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ —Å–º–µ—Ç—ã '{estimate_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}'")
        
        start_time = time.time()
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            total_cost = sum(item.get('cost', 0) for item in items)
            total_duration = sum(item.get('duration', 0) for item in items)
            
            logger.info(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(items)} –ø–æ–∑–∏—Ü–∏–π (–æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost}‚ÇΩ, –≤—Ä–µ–º—è: {total_duration}—á)")
            
            items_text = "\n".join([
                f"- {item.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}: {item.get('duration', 0)}—á, {item.get('cost', 0)}‚ÇΩ"
                for item in items
            ])
            
            prompt = f"""
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–º–µ—Ç—É IT-–ø—Ä–æ–µ–∫—Ç–∞ –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
            
            –ù–∞–∑–≤–∞–Ω–∏–µ: {estimate_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}
            –û–ø–∏—Å–∞–Ω–∏–µ: {estimate_data.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}
            
            –ü–æ–∑–∏—Ü–∏–∏ —Å–º–µ—Ç—ã:
            {items_text}
            
            –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost}‚ÇΩ
            –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_duration}—á
            
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏ –¥–∞–π –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
            {{
                "suggestions": ["–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ 1", "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ 2"],
                "optimization_tips": ["—Å–æ–≤–µ—Ç –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ 1", "—Å–æ–≤–µ—Ç 2"],
                "risk_factors": ["—Ä–∏—Å–∫ 1", "—Ä–∏—Å–∫ 2"],
                "total_estimation": {{
                    "min_cost": —á–∏—Å–ª–æ,
                    "max_cost": —á–∏—Å–ª–æ,
                    "recommended_buffer": —á–∏—Å–ª–æ_–≤_–ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
                }}
            }}
            
            –£—á—Ç–∏:
            - –ê–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å—Ü–µ–Ω–æ–∫ –∏ –≤—Ä–µ–º–µ–Ω–∏
            - –í–æ–∑–º–æ–∂–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            - –†–∏—Å–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
            - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±—É—Ñ–µ—Ä—É –≤—Ä–µ–º–µ–Ω–∏/–±—é–¥–∂–µ—Ç–∞
            """
            
            logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∫ GigaChat")
            logger.debug(f"üî§ –†–∞–∑–º–µ—Ä –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            messages = [{"role": "user", "content": prompt}]
            response = self.giga.chat({"messages": messages})
            
            request_time = time.time() - start_time
            logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω –∞–Ω–∞–ª–∏–∑ –æ—Ç GigaChat –∑–∞ {request_time:.2f} —Å–µ–∫")
            
            content = response.choices[0].message.content.strip()
            logger.debug(f"üìã –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            try:
                logger.info("üîß –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞...")
                # –£–±–∏—Ä–∞–µ–º markdown –±–ª–æ–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                if content.startswith('```json') and content.endswith('```'):
                    content = content[7:-3].strip()
                elif content.startswith('```') and content.endswith('```'):
                    content = content[3:-3].strip()
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –±–ª–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ
                elif '```json' in content and '```' in content:
                    start = content.find('```json') + 7
                    end = content.find('```', start)
                    if end != -1:
                        content = content[start:end].strip()
                analysis_data = json.loads(content)
                
                analysis = AIAnalysis(
                    suggestions=analysis_data.get('suggestions', []),
                    optimization_tips=analysis_data.get('optimization_tips', []),
                    risk_factors=analysis_data.get('risk_factors', []),
                    total_estimation=analysis_data.get('total_estimation', {})
                )
                
                total_time = time.time() - start_time
                logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–º–µ—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {total_time:.2f} —Å–µ–∫")
                logger.info(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(analysis.suggestions)}, —Å–æ–≤–µ—Ç–æ–≤: {len(analysis.optimization_tips)}, —Ä–∏—Å–∫–æ–≤: {len(analysis.risk_factors)}")
                
                return analysis
                
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç –ò–ò: {e}")
                logger.error(f"üîç –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –æ—Ç–≤–µ—Ç –∞–Ω–∞–ª–∏–∑–∞: {content}")
                return AIAnalysis([], [], [], {})
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–º–µ—Ç—ã: {e}")
            logger.error(f"‚è±Ô∏è –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏ –∞–Ω–∞–ª–∏–∑–∞: {time.time() - start_time:.2f} —Å–µ–∫")
            return AIAnalysis([], [], [], {})
    
    def get_consultation(self, question: str, context: str = "") -> str:
        """
        –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º —Å–º–µ—Ç—ã –∏ –ø—Ä–æ–µ–∫—Ç–∞
        
        Args:
            question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç (–¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–µ–∫—Ç–µ/—Å–º–µ—Ç–µ)
        
        Returns:
            –û—Ç–≤–µ—Ç –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
        """
        if not self.enabled:
            logger.warning("ü§ñ –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω - –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞")
            return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ GIGACHAT_CREDENTIALS."
        
        logger.info(f"üí° –ù–∞—á–∏–Ω–∞—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –≤–æ–ø—Ä–æ—Å—É: {question[:50]}...")
        logger.debug(f"üìù –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context[:100]}..." if context else "üìù –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
        
        start_time = time.time()
        
        try:
            system_prompt = """
            –¢—ã - —ç–∫—Å–ø–µ—Ä—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ IT-–ø—Ä–æ–µ–∫—Ç–∞–º –∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é —Å–º–µ—Ç. 
            –û—Ç–≤–µ—á–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã.
            –£—á–∏—Ç—ã–≤–∞–π —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—ã–Ω–æ–∫ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏.
            –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –ø–æ–ø—Ä–æ—Å–∏ —É—Ç–æ—á–Ω–∏—Ç—å.
            """
            
            user_prompt = f"""
            –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}
            
            –í–æ–ø—Ä–æ—Å: {question}
            
            –î–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.
            """
            
            logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∫ GigaChat")
            logger.debug(f"üî§ –†–∞–∑–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞: {len(question)} —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {len(context)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            messages = [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ]
            response = self.giga.chat({"messages": messages})
            
            request_time = time.time() - start_time
            logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ—Ç GigaChat –∑–∞ {request_time:.2f} —Å–µ–∫")
            
            answer = response.choices[0].message.content.strip()
            
            total_time = time.time() - start_time
            logger.info(f"‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∑–∞ {total_time:.2f} —Å–µ–∫")
            logger.info(f"üìã –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(answer)} —Å–∏–º–≤–æ–ª–æ–≤")
            logger.debug(f"üí¨ –ù–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞: {answer[:100]}...")
            
            return answer
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {e}")
            logger.error(f"‚è±Ô∏è –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {time.time() - start_time:.2f} —Å–µ–∫")
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    def categorize_work(self, work_name: str, work_description: str = "") -> str:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞–±–æ—Ç—ã
        
        Args:
            work_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
            work_description: –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
        
        Returns:
            –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞–±–æ—Ç—ã
        """
        if not self.enabled:
            logger.debug("ü§ñ –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return "–û–±—â–µ–µ"
        
        logger.debug(f"üéØ –û–ø—Ä–µ–¥–µ–ª—è—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã: {work_name}")
        
        try:
            prompt = f"""
            –û–ø—Ä–µ–¥–µ–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Ä–∞–±–æ—Ç—ã:
            
            –ù–∞–∑–≤–∞–Ω–∏–µ: {work_name}
            –û–ø–∏—Å–∞–Ω–∏–µ: {work_description}
            
            –í—ã–±–µ—Ä–∏ –û–î–ù–£ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑:
            - –ê–Ω–∞–ª–∏–∑ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            - UI/UX –¥–∏–∑–∞–π–Ω
            - Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
            - Backend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
            - –ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
            - –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            - DevOps –∏ –¥–µ–ø–ª–æ–π
            - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
            - –û–±—â–µ–µ
            
            –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
            """
            
            messages = [{"role": "user", "content": prompt}]
            response = self.giga.chat({"messages": messages})
            
            category = response.choices[0].message.content.strip()
            logger.info(f"üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞: {category} –¥–ª—è '{work_name}'")
            return category
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
            return "–û–±—â–µ–µ"
    
    def suggest_similar_works(self, work_name: str, existing_templates: List[Dict[str, Any]]) -> List[str]:
        """
        –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–∏—Ö —Ä–∞–±–æ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤
        
        Args:
            work_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
            existing_templates: –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —à–∞–±–ª–æ–Ω—ã —Ä–∞–±–æ—Ç
        
        Returns:
            –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        """
        if not self.enabled or not existing_templates:
            return []
        
        try:
            templates_text = "\n".join([
                f"- {template.get('name', '')}: {template.get('description', '')}"
                for template in existing_templates[:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            ])
            
            prompt = f"""
            –ù–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤ —Ä–∞–±–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏ 3-5 –ø–æ—Ö–æ–∂–∏—Ö –∏–ª–∏ –¥–æ–ø–æ–ª–Ω—è—é—â–∏—Ö —Ä–∞–±–æ—Ç –¥–ª—è: {work_name}
            
            –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —à–∞–±–ª–æ–Ω—ã:
            {templates_text}
            
            –ü—Ä–µ–¥–ª–æ–∂–∏ —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç, –∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ –∏ –¥–µ—Ñ–∏—Å–æ–≤.
            """
            
            messages = [{"role": "user", "content": prompt}]
            response = self.giga.chat({"messages": messages})
            
            suggestions = [
                line.strip() 
                for line in response.choices[0].message.content.strip().split('\n')
                if line.strip()
            ][:5]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            
            logger.info(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–æ {len(suggestions)} –ø–æ—Ö–æ–∂–∏—Ö —Ä–∞–±–æ—Ç")
            return suggestions
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç: {e}")
            return [] 